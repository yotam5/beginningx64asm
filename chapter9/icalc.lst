     1                                  extern printf
     2                                  
     3                                  
     4                                  section .data
     5 00000000 8000000000000000            number1 dq 128
     6 00000008 1300000000000000            number2 dq 19
     7 00000010 F4FFFFFFFFFFFFFF            neg_num dq -12
     8 00000018 746865206E756D6265-         fmt db "the numbers are %ld and %ld",10,0
     8 00000021 72732061726520256C-
     8 0000002A 6420616E6420256C64-
     8 00000033 0A00               
     9 00000035 257320256C640A00            fmtint db "%s %ld",10,0
    10 0000003D 7468652073756D2069-         sumi db "the sum is",0
    10 00000046 7300               
    11 00000048 746865206469666665-         difi db "the difference is",0
    11 00000051 72656E636520697300 
    12 0000005A 6E756D626572203120-         inci db "number 1 increamented",0
    12 00000063 696E637265616D656E-
    12 0000006C 74656400           
    13 00000070 6E756D626572203120-         deci db "number 1 decrementeed",0
    13 00000079 64656372656D656E74-
    13 00000082 65656400           
    14 00000086 6E756D626572203120-         sali db "number 1 shift left2 (x4) :",0
    14 0000008F 7368696674206C6566-
    14 00000098 74322028783429203A-
    14 000000A1 00                 
    15 000000A2 6E756D626572203120-         sari db "number 1 shift right 2 (/4) :",0
    15 000000AB 736869667420726967-
    15 000000B4 6874203220282F3429-
    15 000000BD 203A00             
    16 000000C0 6E756D626572203120-         sariex db "number 1 shift right 2 (/2) with "
    16 000000C9 736869667420726967-
    16 000000D2 6874203220282F3229-
    16 000000DB 207769746820       
    17 000000E1 7369676E2065787465-             db "sign externsion :",0
    17 000000EA 726E73696F6E203A00 
    18 000000F3 7468652070726F6475-         multi db "the product is :",0
    18 000000FC 6374206973203A00   
    19 00000104 74686520696E746567-         divi db "the integer quotient is",0
    19 0000010D 65722071756F746965-
    19 00000116 6E7420697300       
    20 0000011C 746865206D6F64756C-         remi db "the modulo is",0
    20 00000125 6F20697300         
    21                                  
    22                                  section .bss
    23 00000000 ????????????????            resulti resq 1
    24 00000008 ????????????????                modulo resq 1
    25                                  
    26                                  section .text
    27                                      global main
    28                                  
    29                                  main:
    30 00000000 55                          push rbp
    31 00000001 4889E5                      mov rbp,rsp
    32                                  
    33                                      ;displaying the numbers
    34 00000004 48BF-                       mov rdi,fmt
    34 00000006 [1800000000000000] 
    35 0000000E 488B3425[00000000]          mov rsi,[number1]
    36 00000016 488B1425[08000000]          mov rdx,[number2]
    37 0000001E B800000000                  mov rax,0
    38 00000023 E8(00000000)                call printf
    39                                  
    40                                      ;adding
    41 00000028 488B0425[00000000]          mov rax,[number1]
    42 00000030 48030425[08000000]          add rax,[number2] ;add number3 to rax
    43 00000038 48890425[00000000]          mov [resulti],rax ;move sum to result
    44                                      ;displaying the result
    45 00000040 48BF-                       mov rdi,fmtint
    45 00000042 [3500000000000000] 
    46 0000004A 48BE-                       mov rsi,sumi
    46 0000004C [3D00000000000000] 
    47 00000054 488B1425[00000000]          mov rdx,[resulti]
    48 0000005C B800000000                  mov rax,0
    49 00000061 E8(00000000)                call printf
    50                                  
    51                                      ;substracting
    52 00000066 488B0425[00000000]          mov rax,[number1]
    53 0000006E 482B0425[08000000]          sub rax,[number2] ;substruct number2 from rax
    54 00000076 48890425[00000000]          mov [resulti],rax
    55                                      ;display the result
    56 0000007E 48BF-                       mov rdi,fmtint
    56 00000080 [3500000000000000] 
    57 00000088 48BE-                       mov rsi,difi
    57 0000008A [4800000000000000] 
    58 00000092 488B1425[00000000]          mov rdx,[resulti]
    59 0000009A B800000000                  mov rax,0
    60 0000009F E8(00000000)                call printf
    61                                  
    62                                      ;incrementing
    63 000000A4 488B0425[00000000]          mov rax,[number1]
    64 000000AC 48FFC0                      inc rax
    65 000000AF 48890425[00000000]          mov [resulti],rax
    66                                      ;display the result
    67 000000B7 48BF-                       mov rdi,fmtint
    67 000000B9 [3500000000000000] 
    68 000000C1 48BE-                       mov rsi,inci
    68 000000C3 [5A00000000000000] 
    69 000000CB 488B1425[00000000]          mov rdx,[resulti]
    70 000000D3 B800000000                  mov rax,0
    71 000000D8 E8(00000000)                call printf
    72                                  
    73                                      ;decrementing
    74 000000DD 488B0425[00000000]          mov rax,[number1]
    75 000000E5 48FFC8                      dec rax
    76                                      ;display the result
    77 000000E8 48BF-                       mov rdi,fmtint
    77 000000EA [3500000000000000] 
    78 000000F2 48BE-                       mov rsi,deci
    78 000000F4 [7000000000000000] 
    79 000000FC 488B1425[00000000]          mov rdx,[resulti]
    80 00000104 B800000000                  mov rax,0
    81 00000109 E8(00000000)                call printf
    82                                  
    83                                      ;shift arithmetic left
    84 0000010E 488B0425[00000000]          mov rax,[number1]
    85 00000116 48C1E002                    sal rax,2 ;multiply rax by 4
    86 0000011A 48890425[00000000]          mov [resulti],rax
    87                                      ;displaying the result
    88 00000122 48BF-                       mov rdi,fmtint
    88 00000124 [3500000000000000] 
    89 0000012C 48BE-                       mov rsi,sali
    89 0000012E [8600000000000000] 
    90 00000136 488B1425[00000000]          mov rdx,[resulti]
    91 0000013E B800000000                  mov rax,0
    92 00000143 E8(00000000)                call printf
    93                                  
    94                                      ;shift arithmetic right
    95 00000148 488B0425[00000000]          mov rax,[number1]
    96 00000150 48C1F802                    sar rax,2 ;divide rax by 4
    97 00000154 48890425[00000000]          mov [resulti],rax
    98                                      ;dispalying the result
    99 0000015C 48BF-                       mov rdi,fmtint
    99 0000015E [3500000000000000] 
   100 00000166 48BE-                       mov rsi,sari
   100 00000168 [A200000000000000] 
   101 00000170 488B1425[00000000]          mov rdx,[resulti]
   102 00000178 B800000000                  mov rax,0
   103 0000017D E8(00000000)                call printf
   104                                  
   105                                      ;shift arithmetic with sign externsion
   106 00000182 488B0425[10000000]          mov rax,[neg_num]
   107 0000018A 48C1F802                    sar rax,2 ;divide rax by 4
   108 0000018E 48890425[00000000]          mov [resulti],rax
   109                                      ;displaying the result
   110 00000196 48BF-                       mov rdi,fmtint
   110 00000198 [3500000000000000] 
   111 000001A0 48BE-                       mov rsi,sariex
   111 000001A2 [C000000000000000] 
   112 000001AA 488B1425[00000000]          mov rdx,[resulti]
   113 000001B2 B800000000                  mov rax,0
   114 000001B7 E8(00000000)                call printf
   115                                  
   116                                      ;multiply
   117 000001BC 488B0425[00000000]          mov rax,[number1]
   118 000001C4 48F72C25[08000000]          imul qword [number2] ;mul rax with number2
   119 000001CC 48890425[00000000]          mov [resulti],rax
   120                                      ;display the result
   121 000001D4 48BF-                       mov rdi,fmtint
   121 000001D6 [3500000000000000] 
   122 000001DE 48BE-                       mov rsi,multi
   122 000001E0 [F300000000000000] 
   123 000001E8 488B1425[00000000]          mov rdx,[resulti]
   124 000001F0 B800000000                  mov rax,0
   125 000001F5 E8(00000000)                call printf
   126                                  
   127                                      ;divide
   128 000001FA 488B0425[00000000]          mov rax,[number1]
   129 00000202 BA00000000                  mov rdx,0 ;rdx needs 0 before idiv
   130 00000207 48F73C25[08000000]          idiv qword [number2] ;divide rax by number2 modulo
   131 0000020F 48891425[08000000]          mov [modulo],rdx
   132                                      ;displaying the result
   133 00000217 48BE-                       mov rsi,divi
   133 00000219 [0401000000000000] 
   134 00000221 48BF-                       mov rdi,fmtint
   134 00000223 [3500000000000000] 
   135 0000022B 488B1425[00000000]          mov rdx,[resulti]
   136 00000233 B800000000                  mov rax,0
   137 00000238 E8(00000000)                call printf
   138                                  
   139 0000023D 48BF-                       mov rdi,fmtint
   139 0000023F [3500000000000000] 
   140 00000247 48BE-                       mov rsi,remi
   140 00000249 [1C01000000000000] 
   141 00000251 488B1425[08000000]          mov rdx,[modulo]
   142 00000259 B800000000                  mov rax,0
   143 0000025E E8(00000000)                call printf
   144                                  
   145 00000263 4889EC                      mov rsp,rbp
   146 00000266 5D                          pop rbp
   147 00000267 C3                          ret
   148                                  
